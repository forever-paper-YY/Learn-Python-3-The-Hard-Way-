时间：2019年11月20日 

地点：公司 

正文：

1、代码

（1）简单代码
class Scene(object):              # 定义父类Scene
    def enter(self):
        pass

class Engine(object):             # 定义父类Engine
    def _init_(self, scene_map):
        pass
    def play(self):
        pass

class Death(Scene):               # 定义子类Death
    def enter(self):
        pass

class CentralCorridor(Scene):     # 定义子类CentralCorridor
    def enter(self):
        pass

class LaserWeaponArmory(Scene):   # 定义子类LaserWeaponArmory
    def enter(self):
        pass

class TheBridge(Scene):           # 定义子类TheBridge
    def enter(self):
        pass

class EscapePod(Scene):           # 定义子类EscapePod
    def enter(self):
        pass

class Map(object):                # 定义父类Map
    def _init_(self, start_scene):
        pass
    def next_scene(self, scene_name):
        pass
    def opening_scene(self):
        pass

a_map = Map('central_corridor')    # 用父类Map创建一个实例a_map
a_game = Engine(a_map)             # 用父类Engine创建一个实例a_game
a_game.play()                      # 执行类中的方法play函数

（2）复杂的代码
from sys import exit
from random import randiant
from textwrap import dedent

class Scene(object):
    def enter(self):
        print("This scene is not yet configured.")
        print("Subclass it and implement enter().")
        exit(1)

class Engine(object):
    def _init_(self, scene_map):
        self.scene_map = scene.map
    def play(self):
        current_scene = self.scene_map.opening_scene()
        last_scene = self.scene_map.next_scene('finished')
        
        while current_scene != last_scene:
            next_scene_name = current_scene.enter()
            current_scene = self.scene_map.next_scene(next_scene_name)
        
        # be sure to print out the last scene
        current_scene.enter()

class Death(object):
    quips = ["You died. You kinda suck at this.",
            "Your mom would be proud...if she were smarter.",
            "Such a luser.",
            "I have a small puppy that's better at this.",
            "You're worse than your Dad's jokes."
            ]
    def enter(self):
        print(Death.quips[randiant(0, len(self.quips)-1)])
        exit(1)

class CentralCorridor(Scene):
    def enter(self):
        print(dedent("""
              The Gothons of Planet Percal #25 have invaded your ship and
              destroyed your entire crew. You are the last surviving
              member and your last mission is to get the neutron destruct
              bomb from the Weapons Armory, put it in the bridge, and 
              blow the ship up after getting into an escape pod.
              You're running down the central corridor to the Weapons
              Armory when a Gothon jumps out, red scaly skin, dark grimy
              teeth, and evil clown costume flowing around his hate
              filled body. He's blocking the door to the Armory and
              about to pull a weapon to blast you.              
              """))
         
         action = input("> ")
         
         if action == "shoot!":
             print(dedent("""很长一段话       
             """))
             return 'death'
         elif action == "dodge!":
             print(dedent("""很长一段话
             """))
             return 'death'
         elif action == "tell a joke":
             print(dedent("""很长一段话
             """))
             return 'laser_weapon_armory'
         else:
             print("DOES NOT COMPUTE!")
             return 'central_corridor'

class LaserWeaponArmory(Scene):
    def enter(self):
        print(dedent("""很长一段话
        """))
        code = f"{randiant(1, 9)}{randiant(1, 9)}{randiant(1, 9)}"
        guess = input("[keypad]>")
        guess = 0
        
        while guess != code and guesses < 10:
            print("Bzzzzeddd!")
            guesses += 1
            guess = input("[keypad]>")
        
        if guess == code:
            print(dedent("""很长一段话
            """))
            return 'the_bridge'
        else:
            print(dedent("""很长一段话
            """))
            return 'death'

class TheBridge(Scene):
    def enter(self):
        print(dedent("""很长一段话
        """))
        
        action = input("> ")
        
        if action == "throw the bomb":
            print(dedent("""很长一段话
            """))
            return 'death'
        elif action == "slowly place the bomb":
            print(dedent("""很长一段话
            """))
            return 'escape_pod'
        else:
            print("DOES NOT COMPUTE!")
            return "the_bridge"

class EscapePod(Scene):
    def enter(self):
        print(dedent("""很长一段话
        """))
        
        good_pod = randiant(1, 5)
        guess = input("[pod #]> ")
        
        if int(guess) != good_pod:
            print(dedent("""很长一段话
            """))
            return 'death'
        else:
            print(dedent("""很长一段话
            """))
            return 'finished'

class Finished(Scene):
    def enter(self):
        print("You won! Good job.")
        return 'finished'

class Map(object):
    scenes = {
        'central_corridor': CentralCorridor(),
        'laser_weapon_armory': LaserWeaponArmory(),
        'the_bridge': TheBridge(),
        'escape_pod': EscapePod(),
        'death': Death(),
        'finished': Finished(),
        }
    
    def _init_(self, start_scene):
        self.start_scene = start_scene
    def next_scene(self, scene_name):
        val = Map.scene.get(scene_name)
        return val
    def opening_scene(self):
        return self.next_scene(self.start_scene)

a_map = Map('central_corridor')
a_game = Engine(a_map)
a_game.play()
    

2、笔记



